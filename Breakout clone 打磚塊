import pygame
import random

# 初始化Pygame
pygame.init()

# 設置螢幕尺寸
screen_width = 800
screen_height = 600
screen = pygame.display.set_mode((screen_width, screen_height))

# 設置遊戲標題
pygame.display.set_caption("Simple Pinball Game")

# 定義顏色
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
RED = (255, 0, 0)
BLUE = (0, 0, 255)
GREEN = (0, 255, 0)
YELLOW = (255, 255, 0)

# 球類別
class Ball(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = pygame.Surface([10, 10])
        self.image.fill(WHITE)
        self.rect = self.image.get_rect()
        self.rect.x = random.randint(0, screen_width - 10)
        self.rect.y = random.randint(0, screen_height - 10)
        self.velocity = [random.randint(4, 8), random.randint(-8, 8)]

    def update(self):
        self.rect.x += self.velocity[0]
        self.rect.y += self.velocity[1]

        # 邊界檢查
        if self.rect.x <= 0 or self.rect.x >= screen_width - 10:
            self.velocity[0] = -self.velocity[0]
        if self.rect.y <= 0:
            self.velocity[1] = -self.velocity[1]

# 定義彈板類別
class Paddle(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = pygame.Surface([100, 10])
        self.image.fill(BLUE)
        self.rect = self.image.get_rect()
        self.rect.x = (screen_width - 100) // 2
        self.rect.y = screen_height - 30

    def update(self):
        pos = pygame.mouse.get_pos()
        self.rect.x = pos[0]

        if self.rect.x > screen_width - 100:
            self.rect.x = screen_width - 100

# 定義板塊類別
class Block(pygame.sprite.Sprite):
    def __init__(self, x, y):
        super().__init__()
        self.image = pygame.Surface([50, 20])
        self.image.fill(YELLOW)
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y

# 初始化精靈組
all_sprites = pygame.sprite.Group()
blocks = pygame.sprite.Group()
ball = Ball()
all_sprites.add(ball)
paddle = Paddle()
all_sprites.add(paddle)

# 隨機生成板塊
for i in range(10):
    block = Block(random.randint(0, screen_width - 50), random.randint(0, screen_height - 200))
    all_sprites.add(block)
    blocks.add(block)

# 遊戲主循環
running = True
clock = pygame.time.Clock()
game_over = False
win = False
score = 0

font = pygame.font.Font(None, 74)
small_font = pygame.font.Font(None, 36)

def draw_buttons():
    # 繪製Continue按鈕
    continue_button = pygame.Rect(250, 350, 150, 50)
    pygame.draw.rect(screen, GREEN, continue_button)
    continue_text = small_font.render("Continue", True, BLACK)
    screen.blit(continue_text, (275, 360))

    # 繪製End按鈕
    end_button = pygame.Rect(450, 350, 150, 50)
    pygame.draw.rect(screen, RED, end_button)
    end_text = small_font.render("End", True, BLACK)
    screen.blit(end_text, (490, 360))
    
    return continue_button, end_button

def reset_game():
    global ball, paddle, all_sprites, blocks, game_over, score, win
    all_sprites.empty()
    blocks.empty()
    ball = Ball()
    all_sprites.add(ball)
    paddle = Paddle()
    all_sprites.add(paddle)
    for i in range(10):
        block = Block(random.randint(0, screen_width - 50), random.randint(0, screen_height - 200))
        all_sprites.add(block)
        blocks.add(block)
    game_over = False
    win = False
    score = 0

while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if game_over and event.type == pygame.MOUSEBUTTONDOWN:
            mouse_pos = event.pos
            continue_button, end_button = draw_buttons()
            if continue_button.collidepoint(mouse_pos):
                reset_game()
            elif end_button.collidepoint(mouse_pos):
                running = False

    if not game_over and not win:
        all_sprites.update()

        # 檢查球和彈板的碰撞
        if pygame.sprite.collide_mask(ball, paddle):
            ball.velocity[1] = -ball.velocity[1]

        # 檢查球和板塊的碰撞
        block_hit_list = pygame.sprite.spritecollide(ball, blocks, True)
        for block in block_hit_list:
            score += 1
            ball.velocity[1] = -ball.velocity[1]

        # 檢查球是否碰到下邊界
        if ball.rect.y >= screen_height - 10:
            game_over = True

        # 檢查是否所有板塊都被消除
        if len(blocks) == 0:
            win = True

        screen.fill(BLACK)
        all_sprites.draw(screen)
        
        # 顯示分數
        score_text = small_font.render("Score: " + str(score), True, WHITE)
        screen.blit(score_text, (10, 10))
    elif game_over:
        # 顯示 "Game Over" 和按鈕
        screen.fill(BLACK)
        text = font.render("Game Over", True, RED)
        screen.blit(text, (250, 250))
        continue_button, end_button = draw_buttons()
    elif win:
        # 顯示 "WIN" 並自動重置遊戲
        screen.fill(BLACK)
        text = font.render("WIN", True, GREEN)
        screen.blit(text, (350, 250))
        pygame.display.flip()
        pygame.time.wait(2000)
        reset_game()

    pygame.display.flip()
    clock.tick(60)

pygame.quit()
